<h1 id='current-version'>Current version</h1>
<ul>
<li><p>By default, all requests to <code>/openmrs/ws/rest</code> receive the v1 version of the REST API.</p></li>
<li><p>We have hosted online <a href="https://demo.openmrs.org/openmrs/module/webservices/rest/apiDocs.htm">swagger documentation</a> that is 
generated on the fly.</p></li>
</ul>
<h1 id='resources'>Resources</h1>
<ul>
<li><p>Every available object in the web services (ws) module is written up as a resource. </p></li>
<li><p>The resource class defines the properties that are exposed and the setters that are available. </p></li>
<li><p>The class also defines the representations and what goes in them (ref vs default vs full).</p></li>
</ul>

<p><b>See documentation about resources and their URIs here: <a href="https://wiki.openmrs.org/display/docs/REST+Web+Service+Resources+in+OpenMRS+1.9">REST Web Service Resources in OpenMRS 1.9</a></b></p>
<h1 id='subresources'>Subresources</h1>
<ul>
<li><p>There are some objects that are not defined or do not make sense apart from their parent object which we refer as subresources. </p></li>
<li><p>Examples are PersonNames, PersonAddresses, ConceptNames, etc. </p></li>
<li><p>You can act on subresources under the parent url.</p></li>
</ul>
<h3 id='examples'>Examples :</h3>
<p><b> Adding a person name. </b></p>
<pre class="highlight shell_session"><code>POST /openmrs/ws/rest/v1/person/target_person_uuid/name 
{
  "givenName": "John",
  "familyName": "Smith"
}
</code></pre>
<p><b> Editing a person&#39;s name. </b></p>
<pre class="highlight shell_session"><code>POST /openmrs/ws/rest/v1/person/target_person_uuid/name/target_name_uuid 
{
  "givenName": "Johnny"
}
</code></pre>
<ul>
<li><p>A subresource can have only one parent. </p></li>
<li><p>If it seems like an object has two or more parents, then it is most likely a top-level resource. </p></li>
<li><p>Example &quot;encounters&quot; should not be a subresource of &quot;patient&quot; and &quot;location&quot; resource type (answering questions of &quot;all encounters of a patient&quot; and &quot;all encounters at a location&quot;). </p></li>
</ul>

<p><b> Instead, these should be queries on the encounter resource: </b> </p>
<pre class="highlight shell_session"><code>
 Get encounter list for specific patient.

 GET '/openmrs/ws/rest/v1/encounter?patient=target_patient_uuid'

</code></pre><pre class="highlight shell_session"><code>
 Get encounter list for specific location.

 GET '/openmrs/ws/rest/v1/encounter?location=target_location_uuid'

</code></pre><h1 id='resources-with-subtypes'>Resources with Subtypes</h1>
<ul>
<li><p>Some resources can have multiple subtypes,<b> for example the order resource contains drugorder and testorder subtypes</b></p></li>
<li><p>When creating a resource that has subtypes via a POST, you must specify which subtype of the resource you are creating, 
with a special t property of the object.</p></li>
</ul>
<h3 id='examples-2'>Examples :</h3><pre class="highlight shell_session"><code>
POST /openmrs/ws/rest/v1/order
{"t": "testorder", /*... and other properties */}
</code></pre>
<ul>
<li><p>If you GET a resource that has subtypes, each result will be of one of those subtypes, 
which you can see by looking at the special t property of each result. </p></li>
<li><p>You may query for only a certain subtype of a resource by providing a t query parameter. </p></li>
</ul>
<pre class="highlight shell_session"><code>
 Get encounter orders of druge order sub type.

 GET  /openmrs/ws/rest/v1/order?&amp;t=drugorder&amp;v=full'
</code></pre>